异常笔记3-使用throw抛出异常
程序出现错误时，系统会自动抛出异常。也允许程序自行抛出异常，使用throw语句来完成。

10.4.1 抛出异常
throw语句可以单独使用，抛出的不是异常类，是一个异常实例，而且每次只能抛出一个异常实例。
如果throw语句抛出的异常时Checked异常，则该throw语句要么处于try块中，显式捕获；要么放在一个带throws声明抛出的方法中。

10.4.2 自定义异常类
抛出异常时，应该选择合适的异常类，从而可以明确地描述该异常情况。
自定义异常都应该继承Exception基类，如果自定义Runtime异常，则继承RuntimeException基类。

定义异常类要提供两个构造器：无参、带一个字符串参数的构造器（异常对象的描述信息/异常对象getMessage()方法的返回值）。

10.4.3 catch和throw同时使用
有可能在当前方法中，程序只对部分异常做出处理。

企业级对异常的处理：
- 应用后台需要通过日记来记录异常发生的情况。
- 应用还需要根据异常向应用的使用者传达都中提示。

10.4.4 增强的throw语句（jdk1.7+）
Java7开始，编译器会进行检查，检查throw语句抛出异常的实际类型

10.4.5 异常链
在企业应用中，有分层的关系（MVC）。
当持久层出现SQLException时，不应该直接把这个SQLException传到用户界面：
- 对于正常用户，无任何有效的帮助，会吓坏
- 对于恶意用户，不安全

通常的做法：



