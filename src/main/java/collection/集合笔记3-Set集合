8.3 Set集合
Set集合不允许包含相同的元素，如果试图将两个相同的元素加入同一个Set，那么会返回false，并且新的元素不会被加入。
Set集合判断两个对象相同与否用的是equals方法。

8.3.1 HashSet类
HashSet是Set接口的典型实现。
HashSet按Hash算法来存储集合中的元素，具有很好的存取和查找性能。

特点：
- 元素无序（顺序有可能发生变化）
- HashSet不同步，如果有多个线程访问一个HashSet集合时，必须要用代码保证同步。
- 集合元素可以为null

往HashSet中存储元素时，会根据调用对象的hashCode值来决定存储位置。

注意：如果需要重写equals方法，则对应也要注意hashCode方法，尽量保证这两个方法同步。
不同步情况：
- equals返回true，hashCode返回false ---- HashSet会将这两个元素保存在Hash表的不同位置，都可以添加成功（与Set规则有出入）
- equals返回false，hashCode返回true ---- HashSet会将这两个元素保存在Hash表的同一个位置，在这个位置上用链式结构保存多个对象（导致性能下降）

重写hashCode规则：
- 同一个对象调用hashCode()方法应该返回相同的值。
- 两个对象通过equals()方法比较返回true时，这两个对象的hashCode()方法应该返回相同的值。
- 对象中用作equals()方法比较标准的Field，都应该用来计算hashCode值。
e.g. 计算HashCode：return f1.hashCode()*17 + (int)f2*13


8.3.2 LinkedHashSet类
LinkedHashSet集合也是根据元素的HashCode值来决定元素的存储位置，同时用链表维护元素的次序。（看起来是以插入顺序保存的）
性能略低于HashSet，但迭代访问时有不错的性能。

8.3.3 TreeSet类
TreeSet是SortedSet接口的实现类。（可以确保集合元素处于有序状态）
与HashSet比，TreeSet提供了以下几个额外的方法：
- Comparator<? super E>	comparator()：如果TreeSet使用了定制排序，则该方法返回定制排序所使用的Comparator；如果使用的自然排序，则返回null；
- E	first()：Returns the first (lowest) element currently in this set.
- E	last()：Returns the last (highest) element currently in this set.
- E	lower(E e)：返回指定元素之前的元素。（小于指定元素的最大元素）
- E	higher(E e)：返回指定元素之后的元素。（大于指定元素的最小元素）
- SortedSet<E>	subSet(E fromElement, E toElement)：Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive.
- SortedSet<E>	headSet(E toElement)：返回一个子集，由小于toElement的元素组成。
- SortedSet<E>	tailSet(E fromElement)：返回一个子集，由大于等于fromElement的元素组成。


