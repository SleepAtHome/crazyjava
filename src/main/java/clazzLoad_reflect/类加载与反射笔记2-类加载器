类加载器：
负责将.class文件加载到内存中，并为之生成java.lang.Class对象。

18.2.1 类加载器 简介
一旦一个类被载入JVM中，同一个类就不会再次载入了。

一个类用其全限定名（包名+类名）作为标识。
但在JVM中，一个类用 其全限定类名+其类加载器 作为唯一标识。

e.g. 在pg的包中含有一个Person类，被类加载器ClassLoader的实例kl1负责加载，则该Person类对应的Class对象在JVM中表示为（Person、pg、kl1）
     意味着两个类加载器的同名类：（Person、pg、kl1）和（Person、pg、kl2）是不同的、它们所加载的类也是完全不同、互不兼容的。

当JVM启动时，会形成由3个类加载器组成的初始类加载器层次结构：
- Bootstrap ClassLoader：根类加载器——加载Java的核心类（Java核心类库都在jdk1.x.x_xxx/jre/lib/rt.jar文件中）
- Extension ClassLoader：扩展类加载器——加载JRE的扩展目录（jdk1.x.x_xxx/jre/lib/ext或者由java.ext.dirs系统指定的目录）中JAR包的类。
- System ClassLoader：系统（应用）类加载器——在JVM启动时加载来自java命令的-classpath选项、java.class.path系统属性，或CLASSPATH环境变量所制定的JAR包和类路径。
    程序可以通过ClassLoader的静态方法getSystemClassLoader()来获取系统类加载器。
    如果没有特别指定，则用户自定义的类加载器都以类加载器作为父加载器。

根类加载器很特殊，不是java.lang.ClassLoader的子类，而是由JVM自身实现的。


18.2.2 类加载机制
JVM的类加载机制有3种：
- 全盘负责：当一个类加载器加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入。（除非显式使用另外一个类加载器来载入）
- 父类委托：先让parent类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。
- 缓存机制：保证所有加载过的Class都会被缓存。（修改了Class后，必须重新启动JVM才能生效）

类加载器之间不是继承关系。

开发者可以自定义类加载器（通过继承ClassLoader实现）
JVM中4种类加载器的层次结构：根类加载器<--扩展类加载器<--系统类加载器<--用户类加载器

类加载器加载Class大致有以下8个步骤：
1. 检测此Class是否载入过。（有-->8）
2. 如果父类加载器不存在-->4（如果没有父类加载器，要么parent一定是根类加载器，要么本身就是根类加载器）。
3. 请求使用父类加载器载入目标类。（成功载入-->8；不成功-->5）
4. 请求使用根类加载器来载入目标类。（成功载入-->8；不成功-->7）
5. 当前类加载器尝试寻找Class文件（从与此CLassLoader相关的类路径中寻找）（找到-->6；找不到-->7）
6. 从文件中载入Class。（成功-->8）
7. 抛出ClassNotFoundException。
8. 返回对应的java.lang.Class对象。
其中 5、6步允许重写CLassLoader的findCLass()方法来实现自己的载入策略，也可以重写loadClass()方法来实现自己的载入过程。


18.2.3 创建并使用自定义的类加载器
可以通过扩展CLassLoader的子类，并重写其中的方法自定义类加载器。推荐重写findClass(避免覆盖默认类加载器的父类委托、缓冲机制两种策略)。
ClassLoader的方法：
- protected Class<?>	loadClass(String name, boolean resolve)：ClassLoader的入口点，根据指定的二进制名称来加载该类，系统就是调用这个方法来获取指定类对应的Class对象。
- protected Class<?>	findClass(String name)：根据二进制名称查找类。
- protected Class<?>	defineClass(String name, byte[] b, int off, int len)：将指定类的字节码文件（.Class文件）读入字节数组byte[] b内，并转换为Class对象。（final型，无法重写）
- protected Class<?>	findSystemClass(String name)：从本地系统装入文件。
- static ClassLoader	getSystemClassLoader()：返回系统类加载器
- ClassLoader	getParent()：获得该类加载器的父类加载器
- protected void	resolveClass(Class<?> c)：链接指定的类。
- protected Class<?>	findLoadedClass(String name)：如果虚拟机已加载了名为name的类，则直接返回该类的Class实例；如果没有，返回null。（Java加载类缓存机制的体现）

loadClass()方法执行步骤：
1. 用protected Class<?>	findLoadedClass(String name)来检查是否已经加载类，如果已经加载则直接返回。
2. 在父类加载器上调用loadClass()方法。如果父类加载器为null，则使用根类加载器来加载。
3. 调用findClass()方法的查找类。

自定义类加载器还可以实现：
- 执行代码前自动验证数字签名。
- 根据用户提供的密码解密代码，从而可以实现代码混淆器来避免反编译Class文件
- 根据用户需求动态地加载类。
- 根据应用需求把其他数据以字节码的形式加载到应用中。


18.2.4 URLClassLoader类
URLClassLoader类是ClassLoader类的实现类，也是系统类加载器和扩展类加载器的父类。
URLClassLoader类可以从本地获取二进制文件加载类，也可以从远程主机获取二进制文件来加载类。

构造器：
URLClassLoader(URL[] urls)：使用默认的父类加载器创建一个ClassLoader对象，该对象将从urls所指定的系列路径来查询并加载类。
URLClassLoader(URL[] urls, ClassLoader parent)：使用指定的父类加载器创建一个ClassLoader对象。

得到URLClassLoader对象后，就可以用loadClass()方法加载指定类。







