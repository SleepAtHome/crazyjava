泛型笔记4-泛型方法（jdk1.5+）
定义类、接口时没有使用类型形参，但是定义方法时想自己定义类型形参，也是可以的。

9.4.1 定义泛型方法
修饰符 <T, S> 返回值类型 方法名 (形参列表) {}

9.4.2 泛型方法和类型通配符的区别
泛型方法允许类型形参被用来表示方法的一个或多个参数之间的类型依赖关系，或者方法返回值与参数之间的类型依赖关系。
如果没有这样的依赖关系，就不应该使用泛型方法。

泛型方法使用情况：
    如果一个方法中形参(a)的类型或返回值类型依赖于另一个形参(b)的类型，则形参(b)的类型声明不应该使用通配符。
    因为形参(a)或返回值的类型依赖于形参(b)的类型。
    如果形参(b)的类型无法确定，程序就无法定义形参(a)的类型。
    使用泛型方法。

可以同时使用泛型方法和通配符。

区别：
类型通配符既可以在方法签名中定义形参的类型，也可以用于定义变量的类型。
泛型方法中的类型形参必须在对应方法中显示声明。

9.4.3 Java7的"菱形"语法 与 泛型构造器
Java允许在构造签名中声明类型形参（泛型构造器）

9.4.4 设定通配符下限
<? super Type> ?必须是Type本身或者是Type的父类

TreeSet<E> 有一个构造器用到了这种设定通配符下限的语法:TreeSet(Comparator<? super E> c);





