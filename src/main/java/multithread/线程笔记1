16.1 线程概述
一个任务通常就是一个程序，每个运行中的程序就是一个进程，一个进程可以包含多个线程。
进程：独立性，动态性，并发性（注意和并行的区别）
个人理解：进程是对于程序和计算机的概念

一个线程必须有父进程。
线程可以拥有自己的堆栈、自己的程序计数器、自己的变量，但不拥有系统资源（和父进程共享）。

一个线程可以创建和撤销另一个线程。

线程在程序中是独立的、并发的执行流。他们共享内存、文件句柄和其他每个进程应有的状态。

多线程优势：极大提高了程序运行的效率。
线程的共享环境包括：进程代码段、进程的公有数据等。利用这些，线程间可以相互通信。

多线程编程的优点：
- 进程之间不能共享内存，线程之间可以。
- 系统创建进程时需要为这个进程重新分配系统资源，但创建线程代价小得多，所以用多线程来实现多任务并发比多进程的效率高。
- Java语言内置多线程的支持。

实际应用：浏览器同时下载多个图片、一个Web服务器必须能同时响应多个用户请求...



16.2 线程的创建和启动
所有的线程对象都必须是Thread类或其子类的实例。

== 继承Thread类创建线程类。
继承Thread类，重写run()方法。
多个线程间无法共享线程类的实例变量。

== 实现Runnable接口创建线程类。
定义Runnable接口的实现类，并重写该接口的run()方法。
创建Runnable实现类的实例，并以此作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。
多个线程间可以共享线程类的实例变量。

== 使用Callable和Future创建线程(java 1.5+)
有点像Runnable接口的增强版，通过call()方法作为线程执行体。
call()方法可以有返回值。
call()方法可以声明抛出异常。
Future接口代表Callable接口里call()方法的返回值，并为Future接口提供了一个FutureTask实现类，FutureTask实现了Future接口，并实现了Runnable接口——可以作为Thread类的target。
Future接口定义了几个公共方法来控制它关联的Callable任务：
boolean cancel(boolean b) ：试图取消该Future里关联的Callable任务。
V get() ：返回Callable任务里call()方法的返回值，会导致程序阻塞。
V gat(long timeOut, TimeUnit unit) ：通过timeOut和unit来决定阻塞时等待的时间，如果超出时间将会抛出TimeoutException异常。
boolean isCanceled() ：如果Callable任务在正产完成前被取消，则返回true。
boolean isDone() ：如果Callable任务在已完成，则返回true。


采用Runnable、Callable实现多线程：
+ 可以继承其他类
+ 多线程共享同一个target对象，适合多线程处理同一份资源。从而可以将CPU、代码、和数据分开，形成清晰的模型，契合面向对象的思想。
- 编程较复杂

采用继承Thread类实现多线程：
+ 编写简单
- 不能继承其他类

推荐使用实现Runnable、Callable方式创建多线程。
