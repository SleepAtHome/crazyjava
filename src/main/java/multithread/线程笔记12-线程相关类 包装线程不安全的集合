线程相关类 包装线程不安全的集合
ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等 都是线程不安全的。
当多个并发线程向这些集合中存、取元素时，可能会破坏这些集合的数据完整性。

如果程序中有多个线程可能范文以上这些集合，可以使用Collections提供的静态方法把这些集合包装成线程安全的集合。
static <T> Collection<T> synchronizedCollection(Collection<T> c)：返回指定的collection对应的线程安全的collection。
static <T> List<T> synchronizedList(List<T> list)：返回指定的List对象对应的线程安全的List对象。
static <K,V> Map<K,V> synchronizedMap(Map<K,V> m)：返回指定的Map对象对应的线程安全的Map对象。
static <T> Set<T> synchronizedSet(Set<T> s)：返回指定的Set对象对应的线程安全的Set对象。
static <K,V> SortedMap<K,V>	synchronizedSortedMap(SortedMap<K,V> m)：返回指定的SortedMap对象对应的线程安全的SortedMap对象。
static <T> SortedSet<T>	synchronizedSortedSet(SortedSet<T> s)：返回指定的SortedSet对象对应的线程安全的SortedSet对象。



线程相关类 线程安全的集合类
- 以Concurrent开头的集合类，如ConcurrentHashMap、ConcurrentSkipListMap、ConcurrentSkipListSet、ConcurrentLinkedQueue、ConcurrentLinkedDeque。
- 以CopyOnWrite开头的集合类，如CopyOnWriteArrayList、CopyOnWriteArraySet。

Concurrent---
以Concurrent开头的集合类代表了支持并发访问的集合，支持多个线程的并发写入访问，这些写入线程的所有操作都是线程安全的，但读操作不必锁定。
以Concurrent开头的集合类采用了更复杂的算法来保证永远不会锁住整个集合，因此在并发写入的时候有较好的性能。

当多个线程共享访问一个公共集合时，ConcurrentLinkedQueue时一个恰当的选择。它不允许使用null元素、实现了多线程的高效访问、无需等待。
默认情况下，如ConcurrentHashMap支持16个线程并发写入，当超过16个线程并发写入时，可能会需要等待，要么就显示指定并发数量（通过构造函数）。

与HashMap普通集合不同的是，因为ConcurrentLinkedQueue和如ConcurrentHashMap支持多线程并发访问，所以当使用迭代器来遍历集合元素时，
该迭代器可能不能反映出创建迭代器之后所做的修改，但程序不会抛出任何异常。

使用java.util包下的Collection作为集合对象时，如果该集合对象创建迭代器后集合元素发生改变，则会引发ConcurrentModificationException异常。


CopyOnWrite---
由于CopyOnWriteArraySet底层封装了如CopyOnWriteArrayList，因此它的实现机制完全类似于如CopyOnWriteArrayList集合。
对于如CopyOnWriteArrayList集合，采用了复制底层数组的方式来实现写操作。

当线程对CopyOnWriteArrayList集合执行读取操作时，线程将会直接读取集合本身，无需加锁与阻塞。
当线程对CopyOnWriteArrayList集合执行写入操作时（包括调用add()、remove()、set()等方法），该集合会在底层复制一份新的数组，接下来对新的数组执行写入操作，因此是线程安全的。

CopyOnWriteArrayList执行写入操作时，需要频繁复制数组，性能较差，但读取很快。
所以CopyOnWriteArrayList适合用在读取操作远大于写入操作的场景中  e.g.缓存等

