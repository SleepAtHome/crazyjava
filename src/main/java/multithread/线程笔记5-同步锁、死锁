16.5.5 同步锁（Lock）jdk1.5+
同步锁——通过显示定义同步锁对象来实现同步，在这种机制下，同步锁使用Lock对象充当。
有更广泛的锁定操作，更灵活的结构，可以具有差别很大的属性，并且支持多个相关的Condition对象。

Lock是控制多个线程对共享资源进行访问的工具。通常，锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。
某些锁可能允许对共享资源并发访问，如ReadWriteLock（读写锁）。

Lock、ReadWriteLock是Java5新提供的两个根接口，并为Lock提供了ReentrantLock（可重入锁）实现类；为ReadWriteLock提供了ReentrantReadWriteLock实现类。

在实现线程安全地控制中，比较常用的是ReentrantLock。这个对象可以显式地加锁、释放锁。拿Account来举例。

ReentrantLock锁具有可重入性：一个线程可以对已被加锁的ReentrantLock锁再次加锁，ReentrantLock对象会维持一个计数器来追踪lock()方法的嵌套调用，
线程在每次调用lock()加锁后，必须显示调用unlock()方法来释放锁，所以一段被锁保护的代码可以调用另一个被相同锁保护的方法。


16.5.6  死锁
当两个线程相互等待对方释放同步监视器时就会发生死锁。JVM没有监测，也没有采取措施来处理死锁的情况。
一旦出现死锁，整个程序既不会发生任何异常，也不会给出任何提示，只是所有线程处于阻塞状态，无法继续。
例子：DeadLock类

Thread类的suspend()方法也很容易导致死锁，不推荐。



