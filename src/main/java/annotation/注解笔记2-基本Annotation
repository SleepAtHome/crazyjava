14.1 基本Annotation
Annotation必须使用工具处理，工具负责提取Annotation里包含的元数据，工具还会根据这些元数据增加额外功能。

4个基本的Annotation（java.lang）：
- @Override
- @Deprecated
- @SuppressWarnings
- @SafeVarargs （jdk 1.7+）


14.1.1 @Override 限定重写父类方法
@Override可以强制一个子类必须覆盖父类的方法。
@Override可以告诉编译器检查这个方法，保证父类要包含一个被该方法重写的方法，否则会编译出错。
@Override主要是帮助我们避免一些低级错误，例如写错要重写的方法名等。
@Override只能作用于方法，不能作用于其他程序元素。

14.1.2 @Deprecated 标示已过时
@Deprecated用于标示某个程序元素（类、方法）已过时，当其他程序使用已过时的类、方法时，编译器将会给出警告。

14.1.3 @SuppressWarnings 抑制编译器警告
@SuppressWarnings指示被该Annotation修饰的程序元素（以及该程序元素中所有的子元素）取消显示指定的编译器警告。
@SuppressWarnings会一直作用于该程序元素的所有子元素。
e.g. 使用@SuppressWarnings修饰某个类取消显示某个编译器警告，同时又修饰该类里的某个方法取消显示另一个编译器警告，那么该方法将会同时取消显示这两个编译器警告。
通常，如果程序中没有使用泛型，会引起编译器警告，为了取消这种警告，可以使用@SuppressWarnings修饰。

14.1.4 @SafeVarargs 抑制"堆污染"警告
堆污染：把一个不带泛型的对象赋值给一个带范型的变量（把一个不带泛型的list1赋给一个带范型的list2，但list1中的元素类与list2的泛型不一致）

Java7会在编译该方法的时候（使用-Xlint:unchecked显示详细信息）就发出"堆污染"警告，便于开发者发现问题。
---
javac ErrorUtils.java -Xlint:unchecked -encoding utf-8
ErrorUtils.java:16: 警告: [unchecked] 参数化 vararg 类型List<String>的堆可能已受污染
    public static void faultyMethod(List<String>... lists) {
---

抑制方法：
- 使用@SafeVarargs修饰引发该警告的方法或构造器。
- 使用@SuppressWarnings("unchecked")修饰。
- 编译时使用-Xlint:varargs选项

